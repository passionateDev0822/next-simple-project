{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _react = require(\"react\");\nvar isServer = false;\nvar _default = function _default() {\n  var mountedInstances = new Set();\n  var state;\n  function emitChange(component) {\n    state = component.props.reduceComponentsToState(_toConsumableArray(mountedInstances), component.props);\n    if (component.props.handleStateChange) {\n      component.props.handleStateChange(state);\n    }\n  }\n  return /*#__PURE__*/function (_react$Component) {\n    function _class(props) {\n      var _this;\n      _classCallCheck(this, _class);\n      _this = _callSuper(this, _class, [props]);\n      if (isServer) {\n        mountedInstances.add(_this);\n        emitChange(_this);\n      }\n      return _this;\n    }\n    _inherits(_class, _react$Component);\n    return _createClass(_class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        mountedInstances.add(this);\n        emitChange(this);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        emitChange(this);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        mountedInstances[\"delete\"](this);\n        emitChange(this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return null;\n      }\n    }], [{\n      key: \"rewind\",\n      value:\n      // Used when server rendering\n      function rewind() {\n        var recordedState = state;\n        state = undefined;\n        mountedInstances.clear();\n        return recordedState;\n      }\n    }]);\n  }(_react.Component);\n};\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}